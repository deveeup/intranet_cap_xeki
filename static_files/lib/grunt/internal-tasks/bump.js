"use strict";var semver=require("semver"),shell=require("shelljs");module.exports=function(e){function r(r,o){return e.template.process(r,{delimiters:"bump",data:o})}function o(r,o){e.log.writeln("Committing "+r.join(", ")+" with message: "+o),s("git commit -m '"+o+"' '"+r.join("' '")+"'")}function i(r,o){e.log.writeln("Tagging "+r+" with message: "+o),s("git tag '"+r+"' -m '"+o+"'")}function s(r){if(e.option("no-write"))e.verbose.writeln("Not actually running: "+r);else{e.verbose.writeln("Running: "+r);var o=shell.exec(r,{silent:!0});0!==o.code&&e.log.error("Error ("+o.code+") "+o.output)}}e.registerTask("bump","Bump the version property of a JSON file.",function(){var s=["major","minor","patch","prerelease"],n=[];if(this.args.forEach(function(r){var o=[];s.forEach(function(e){0===e.indexOf(r)&&o.push(e)}),0===o.length?e.log.error('Error: mode "'+r+'" does not match any known modes.'):o.length>1?e.log.error('Error: mode "'+r+'" is ambiguous (possibly: '+o.join(", ")+")."):n.push(o[0])}),0===this.errorCount&&0===n.length&&e.log.error("Error: no modes specified."),this.errorCount>0)throw e.log.error("Valid modes are: "+s.join(", ")+"."),new Error("Use valid modes (or unambiguous mode abbreviations).");var t=this.options({filepaths:["package.json"],syncVersions:!1,commit:!0,commitMessage:"Bumping version to {%= version %}.",tag:!0,tagName:"v{%= version %}",tagMessage:"Version {%= version %}",tagPrerelease:!1}),a={};(Array.isArray(t.filepaths)?t.filepaths:[t.filepaths]).forEach(function(r){var o=e.file.readJSON(r),i=o.version,s=Object.keys(a)[0];t.syncVersions&&s&&(o.version=s),n.forEach(function(e){var r=o.version,i=semver.parse(o.version);i.inc(e),o.version=String(i),/-/.test(r)&&"patch"===e&&(o.version=o.version.replace(/\d+$/,function(e){return e-1})),/-/.test(r)||"prerelease"!==e||(i.inc("patch"),i.inc("prerelease"),o.version=String(i))}),a[i]?a[i].filepaths.push(r):a[i]={version:o.version,filepaths:[r]},e.log.write("Bumping version in "+r+" from "+i+" to "+o.version+"..."),e.file.write(r,JSON.stringify(o,null,2)),e.log.ok()}),t.commit&&Object.keys(a).forEach(function(e){var i=a[e];o(i.filepaths,r(t.commitMessage,{version:i.version,origVersion:e}))});var l=a[Object.keys(a)[0]].version;t.tag&&(t.tagPrerelease||-1===n.indexOf("prerelease")?i(r(t.tagName,{version:l}),r(t.tagMessage,{version:l})):e.log.writeln("Not tagging (prerelease version).")),this.errorCount>0&&e.warn("There were errors.")}),e.template.addDelimiters("bump","{%","%}")};